// Generated by CoffeeScript 1.3.3
(function() {
  var Bot, Camera, EventEmitter, MotorController, Sonar, compulsive, five, util, _, __,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  five = require('johnny-five');

  __ = require('johnny-five/lib/fn.js');

  _ = require('underscore');

  util = require('util');

  compulsive = require('compulsive');

  EventEmitter = require('events').EventEmitter;

  Sonar = require('../lib/sonar.js');

  Camera = require('../lib/camera.js');

  MotorController = require('../lib/motor-controller.js');

  Bot = (function(_super) {

    __extends(Bot, _super);

    Bot.prototype.history = [];

    Bot.prototype.heading = 0;

    Bot.prototype.last = {};

    Bot.prototype.servos = [];

    function Bot(opts) {
      var _this = this;
      if (opts == null) {
        opts = {};
      }
      this.autonomous = opts.autonomous || false;
      this.motors = new MotorController({
        speed: opts.speed || 100,
        right: [3, 11],
        left: [5, 6]
      });
      this.battery = new five.Battery({
        pin: 'A0'
      });
      this.compass = new five.Magnetometer();
      this.sonar = new Sonar();
      this.camera = new Camera();
      this.battery.on('warning', function() {
        return _this.stop('warning: low power: #{@value}');
      });
      this.sonar.on('warning', function() {
        if (_this.motors.isMoving) {
          _this.motors.stop();
          return _this.sonar.scan();
        }
      });
      this.sonar.on('scanned', function() {
        var heading, ping;
        ping = _.max(_this.sonar.sweep, function(ping) {
          return ping.distance;
        });
        heading = _this.heading;
        heading -= 90 - ping.degrees;
        if (heading > 360) {
          heading = heading - 360;
        } else if (heading < 0) {
          heading = 360 + heading;
        }
        console.log("current heading: " + _this.heading + ", new heading: " + heading);
        return _this.turn(heading);
      });
    }

    Bot.prototype.start = function() {
      var _this = this;
      five.Servos().center();
      this.sonar.scan();
      this.repeat(30, 100, function() {
        return _this.heading = (_this.heading + _this.compass.heading) / 2;
      });
      return this.loop(100, function() {
        return _this._read();
      });
    };

    Bot.prototype.drive = function(control) {};

    Bot.prototype.turn = function(heading) {
      var _this = this;
      this.motors.turn('heading');
      return this.loop(100, function(control) {
        if (_this.compass.heading >= heading - 5 && _this.compass.heading <= heading + 5) {
          _this.heading = heading;
          _this.motors.go('forward');
          return control.stop();
        }
      });
    };

    Bot.prototype.stop = function(msg) {
      this._status('stopped');
      return this.motors.decelerate(0);
    };

    Bot.prototype._read = function() {
      this.last = {
        timestamp: Date.now(),
        sonar: {
          scanner: this.sonar.scanner.last ? this.sonar.scanner.last.degrees : false,
          ping: this.sonar.ping.inches
        },
        battery: {
          min: this.battery.min,
          max: this.battery.max,
          value: this.battery.value
        },
        motors: {
          left: this.motors.left.value,
          right: this.motors.right.value
        },
        compass: this.compass.bearing
      };
      this.history.push(this.last);
      return this.emit('read', null);
    };

    return Bot;

  })(EventEmitter);

  ["wait", "loop", "repeat", "queue"].forEach(function(api) {
    return Bot.prototype[api] = compulsive[api];
  });

  module.exports.Bot = Bot;

}).call(this);
