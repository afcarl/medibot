// Generated by CoffeeScript 1.3.3
(function() {
  var EventEmitter, MotorController, compulsive, five, util, _, __,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  five = require('johnny-five');

  __ = require('johnny-five/lib/fn.js');

  _ = require('underscore');

  util = require('util');

  compulsive = require('compulsive');

  EventEmitter = require('events').EventEmitter;

  MotorController = (function(_super) {

    __extends(MotorController, _super);

    MotorController.prototype.isMoving = false;

    MotorController.prototype.isTurning = false;

    function MotorController(opts) {
      this.right = new five.Motor({
        pins: opts.right
      });
      this.left = new five.Motor({
        pins: opts.left
      });
      this.speed = !opts.speed ? 100 : opts.speed;
    }

    MotorController.prototype.move = function(right, left) {
      this.status('moving');
      this.right.move(right);
      return this.left.move(left);
    };

    MotorController.prototype.go = function(direction) {
      var speeds;
      switch (direction) {
        case 'forward':
          speeds = [this.speed, this.speed];
          break;
        case 'reverse':
          speeds = [-this.speed, -this.speed];
          break;
        case 'right':
          speeds = [0, this.speed];
          break;
        case 'left':
          speeds = [this.speed, 0];
      }
      return this.move(speeds);
    };

    MotorController.prototype.turn = function(angle) {
      var direction;
      direction = angle < 180 ? 'left' : 'right';
      this.go(direction);
      return this.status('turning');
    };

    MotorController.prototype.status = function(type) {
      this.isMoving = false;
      this.isTurning = false;
      this.emit(type, null);
      console.log(type);
      switch (type) {
        case 'moving':
          return this.isMoving = true;
        case 'turning':
          return this.isTurning = true;
      }
    };

    MotorController.prototype.stop = function() {
      this.move(0, 0);
      return this.status('stopped');
    };

    return MotorController;

  })(EventEmitter);

}).call(this);
